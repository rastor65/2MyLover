// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  // Auth local:
  passwordHash  String?
  // RBAC:
  role          String    @default("viewer") // viewer | editor | admin | superadmin

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  // Auditoría
  auditLogs       AuditLog[]
  createdProducts Product[]  @relation("CreatedBy")
  updatedProducts Product[]  @relation("UpdatedBy")

  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --------- E-commerce ---------

model Product {
  id          String     @id @default(cuid())
  slug        String     @unique
  name        String
  description String?
  price       Decimal    @db.Decimal(10, 2)
  compareAt   Decimal?   @db.Decimal(10, 2)
  status      String // draft | published | archived
  stock       Int        @default(0)
  // En producción te recomiendo tabla ProductImage para orden;
  // para simplificar usamos JSON (lista de URLs)
  images      Json
  tags        String[]
  // Relación M:N implícita
  categories  Category[]
  variants    Variant[]
  seoTitle    String?
  seoDesc     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdById String?
  updatedById String?

  createdBy User? @relation("CreatedBy", fields: [createdById], references: [id])
  updatedBy User? @relation("UpdatedBy", fields: [updatedById], references: [id])
}

model Variant {
  id        String   @id @default(cuid())
  productId String
  sku       String   @unique
  color     String?
  size      String?
  stock     Int      @default(0)
  priceAdj  Decimal? @db.Decimal(10, 2)

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Category {
  id       String    @id @default(cuid())
  slug     String    @unique
  name     String
  products Product[]
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  entity    String
  entityId  String
  action    String // create | update | delete
  diff      Json?
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([entity, entityId])
}
